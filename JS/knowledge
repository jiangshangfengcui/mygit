1、连等问题
	
	var a = {n: 1}；
	var b = a;
	a.x = a = {n: 2}；

	连等语句先给最右边的变量赋值，然后一次赋值
	.运算符的优先级比=运算符的优先级高，程序先执行a.x
	连等运算符的读取顺序依然是自左向右，或者说连等运算是一系列的函数嵌套，这样导致的结果就是最右边的变量最先赋值

	var a = {n:1}; 
	var b = a;  
	a = {n:2};    
	a.x = a ;

	扩展
		function fun(){  
		    var a = b = 5;  
		}  
		fun();  
		alert(typeof a); // --> undefined  
		alert(typeof b); // --> number  

		连等中声明的变量除了的一个变量外都是全局变量


2、isNaN

		function isNaN(value) {
			return typeof value === 'number' && isNaN(value);
		}

		JS中的数字可以划分为两种：正常数字和NaN
		上面封装的方法其实是多余的，系统提供的方法isNaN已经具备检验数据类型的能力


3、slice、substr、substring的区别
	
		三者的功能都是截取字符串，只是他们的参数不同，slice跟substring的参数是索引，substr的第一个参数是索引，第二个参数是个数
		对于负数参数三者的处理方式也不同，slice将所有的负数参数加字符串length处理，substring直接将负数参数转换成0，substr只将第一个负数参数加length处理

	扩展：自定义字符串插入函数

		insert: function(string, subString, start) {
		    return string.slice(0, start) + subString + string.slice(start);
		}

		数组的截断函数 splice(索引, 个数) 个数为0或者负数无效


4、特殊数据类型相等判断

		null、undefined只有一个
		NaN不等于NaN
		另外，函数也能转换成字符串进行拼接


5、自定义Array.prototype.reduce方法

		reduce: function(array, callback /*, initialValue*/) {
		    if (this === null) {
		        throw new TypeError('Array.prototype.reduce called on null or undefined');
		    }

		    if (typeof callback !== 'function') {
		        throw new TypeError(callback + ' is not a function');
		    }

		    var t = Object(array),
		        len = t.length >>> 0,
		        k = 0,
		        value;

		    if (arguments.length === 3) {
		        value = arguments[2];
		    } else {
		        while (k < len && !(k in t)) {
		            k++;
		        }

		        if (k >= len) {
		            throw new TypeError('Reduce of empty array with no initial value');
		        }

		        value = t[k++];
		    }
		    for (; k < len; k++) {
		        if (k in t) {
		            value = callback(value, t[k], k, t);
		        }
		    }
		    return value;
		}

		在https://developer.mozilla.org网站上给出了相同的代码，只是MDN上是针对Array.prototype构建reduce函数


6、 ECMAScript 位运算符

		ECMAScript中整数分成两种类型：有符号整数（包括正数和负数）和无符号整数（只包括正数）
		所有整数字面量默认都是有符号整数
		有符号整数使用31位表示整数的数值，用第32位表示整数的符号，0表示正数，1表示负数

		将其他进制的数转换成其他进制 [number].toString([radix])

		正数的源码、反码、补码都是源码
		负数的反码是源码除了符号位取反，补码是在反码的基础上加1

		位运算有，var num = 12345;

		否定号（~，NOT）
					numNot = ~num;
		运算规则：
					1、转换成32为数字
					2、转换成它的反码
					3、转换成浮点数
					实质上对数字求负再减1
		
		与运算（&，AND）
					numAnd = num & 11;
		运算规则：
					1、化成而机制
					2、按位与

		或运算（|，OR）
					numOr = num | 11;
		运算股则： 
					1、化成二进制
					2、按位或

		异或运算（^，XOR）
					numXor = num ^ 22;

		左移运算（<<）
					numLeft = num << 3;
					不移动符号位，至操作数值位

		有符号右移运算（>>）
					numRight = num >> 3;
					保留符号位右移3位

		无符号右移运算（>>>）
					numRightUnsign = num >>> 3;


		注*：负数的二进制为其正数的补码加1


7、A instanceof B 检测A的原型链是否在B的原型

	所有的对象的原型链都在Object上
	字面量定义的对象不在Object上
	相同构造器生成的对象原型相同

	例如：

	object（要检测的对象） instanceof constructor（某个构造函数）

	function C(){} 

	var o = new C();

	o instanceof C; // true，因为 Object.getPrototypeOf(o) === C.prototype

8、bind的用法
	
	类似与apple、call方法，改变执行上下文的this, 同为Function的原型方法
	格式  Function.bind(this, arg1, arg2, arg3...)  传入的参数在 Function 中一次首先接受，即使用于ajax中改变this;

9、JSON.parse() 用来解析JSON字符串
	
	语法 
			一个参数 JSON.parse(text) 返回结果
			两个参数 JSON.parse(text, function (key, value) { return value;}) 使用return返回value值, key为解析时某一键值，value为对应的属性值，第二个函数参数可以来在返回结果之前更改属性值

			参数text必须是严格的JSON字符串，键值使用双引号，数组或对象字符串不能以逗号结尾，不然报错

10、keypress时间evt对象
		
		evt.key    是字母
		evt.which  是数字
		
		if(evt.key && evt.key === 'Enter') || evt.which === 13){

		}

11、判断是不是数组
	
	typeof ary            
	ary instanceof Array
	ary.constructor==Array   比较原型链，
	Object.prototype.toString.call(o)=='[object Array]' 通用法 等同于Array.isArray();

12、Object.setPrototypeOf(obj, prototype)

	obj 		要重置原型的对象
	prototype 	新原型，如果是非对象类型什么都不做

	ES6新标准方法

13、超类和子类
	
	被继承的类一般称为“超类”或“父类”，继承的类称为“子类”。

14、WeakMap
	
	所有的key都是弱引用，必须都是Object、Function、Array

	let w = new WeakMap();

	有四种方法：
		w.set(key, value)
		w.get(key)
		w.has(key)
		w.delete(key)

15、Set 
	
	一组不重复的数

	let s = new Set(['ji', 34, 4]);

	s.size 
	s.set(value)
	s.has(value)
	s.delete(value)
	s.clear()
	s.forEach((item) => {
		console.log(item);
	})
	for(let item of s) {
		console.log(item);
	}

16、WeakSet

	一组不重复的数

	let ws = new WeakSet()

	ws.add(window)
	ws.has(value)
	ws.delete(value)

17、class

	class Car {
	  	constructor() {
	    	console.log("Creating a new car");
	  	}

	  	des () {
	    	console.log('I am a car');
	    }

	    static self () {
	    	this.log = '我是静态方法，不会被实例继承，但可以使用super.xxx调用';
	    }
	}
	 
	class Porsche extends Car {
	  	constructor() {
	    	super();
	    	super.des();		// 可以调用超类的方法
	    	console.log("Creating Porsche");
	  	}
	}
	 
	let c = new Porsche();
	// Creating a new car
	// Creating Porsche


	 ES6 明确规定， Class 内部只有静态方法， 没有静态属性
	 Foo.xxx = xxx 的方式定义静态属性


18、Symbol
	
	Symbol 是一种新的数据类型，它的值是唯一的，不可变的。ES6 中提出 symbol 的目的是为了生成一个唯一的标识符，不过你访问不到这个标识符

	var sym = Symbol('some optional description')

	如果它被用作一个对象的属性，那么这个属性会是不可枚举的：
	var o = {
	    val: 10,
	    [ Symbol("random") ]: "I'm a symbol",
	};
	 
	console.log(Object.getOwnPropertyNames(o)); // val


19、Iterator

	原生的遍历器
	let arr = ['a', 'b', 'c'];
	let iter = arr[Symbol.iterator]();

	iter.next()			// {value: 'a', done: false}

	解构赋值、spread、yield会用到Symbol.iterator



	普通对象并没有部署Iterator接口，所以是无法使用for of循环的，用以下两种方案解决：

	// 方法一
	for (var key of Object.keys(someObject)) {
	  console.log(key + ': ' + someObject[key]);
	}

	// 方法二
	function* entries(obj) {
	  for (let key of Object.keys(obj)) {
	    yield [key, obj[key]];
	  }
	}
	for (let [key, value] of entries(obj)) {
	  console.log(key, '->', value);
	}

20、Generators

	function * infiniteNumbers() {
		var n = 1;
		while (true) {
			yield n++;
		}
	}

	var number = infiniteNumbers();
	number.next(); 		// {value: '1', done: false}


	从第二次执行next方法带参数有效


17、promise

	var p = new Promise(function (resolve, reject) {
		if() {
			resolve(/*value*/)
		}else {
			reject(/*reason*/)
		}
	})

	p.the(() => {},
	 () => {})


18、Object.assign(target, ...source)
	浅拷贝合并属性值，

	深拷贝
	deepCopy: function (source) {
        var result = {};
        for (var key in source) {
            result[key] = typeof source[key] === 'object' ? this.deepCopy(source[key]) : source[key];
        }
        return result;
    }
	
19、出于安全考虑禁止通过程序获取历史列表中的url，只能通过window.history.go()、window.history.forward()、window.history.back()、window.history.replace() 方法操作前进后退
	
	通过 window.history.length > 1 来判断是否有前一页


20、原生获取自定义 data 

		target.dataset.id


21、自定义 trim
	trim: function (val) {
	    return typeof val == "string" && val.replace(/(^\s*)|(\s*$)/g, "");
	}

22、检测浏览器内核

	微信    "micromessenger" == userAgent.match(/MicroMessenger/i) 

	IOS    	userAgent.match(/cpu iphone os (.*?) like mac os/)