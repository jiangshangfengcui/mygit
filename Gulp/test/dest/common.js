!function(o){var t=o.document,n=t.documentElement,i=null;function a(){var e=0<o.screen.width&&o.innerWidth<=o.screen.width?o.screen.width:o.innerWidth,t=1080<e?144:e/7.5;t=32<t?t:32,n.style.fontSize=t+"px"}o.addEventListener("resize",function(){clearTimeout(i),i=setTimeout(a,300)},!1),o.addEventListener("pageshow",function(e){e.persisted&&(clearTimeout(i),i=setTimeout(a,300))},!1),"complete"===t.readyState?t.body.style.fontSize="12px":t.addEventListener("DOMContentLoaded",function(e){t.body.style.fontSize="12px"},!1),a()}(window),String.prototype.protocol=function(){var e=this;return(e=window.isSupportWebp?e.replace(/(\.jpg|\.png)/g,".webp"):e).replace(/http:\/\/p\d\.qh[imgs]{3}/,"https://p.ssl.qhmsg")},String.prototype.authorProtocol=function(){var e=this.replace("quc.qhimg","p8.qhimg");return(e=window.isSupportWebp?e.replace(/(\.jpg|\.png)/g,".webp"):e).replace(/http:\/\/p\d\.qh[imgs]{3}/,"https://p.ssl.qhmsg")},String.prototype.drImage=function(t,o){var e=this,n=/^http:\/\/p\d*\.qh(img|msg)\.com\//,i=/^https:\/\/p\d*\.ssl\.qh(img|msg)\.com\//;return o=o||t,n.test(e)?e.replace(n,function(e){return e+"dr/"+[t,o,"/"].join("_")}):i.test(e)?e.replace(i,function(e){return e+"dr/"+[t,o,"/"].join("_")}):e};try{$.ajaxSettings.cache=!1}catch(e){}try{$.ajaxSetup({cache:!1})}catch(e){}var appUserAgent=nodeParam.appUserAgent;function appHideMenu(){0<navigator.userAgent.toLocaleLowerCase().indexOf(appUserAgent.toLocaleLowerCase())&&($("#mod-sell-nav-header").hide(),$("#mod-sell-nav-footer").hide())}$(document).ready(function(){HistoryStock.option.pushData(),appHideMenu()});var qk={},C,G;qk.changeIScrollTop=function(e){if(0<navigator.userAgent.toLocaleLowerCase().indexOf(appUserAgent.toLocaleLowerCase())){var t=$("#mod-sell-nav-header").css("line-height"),o=$("html").css("font-size"),n=0;t&&(-1<o.indexOf("px")&&(o=o.replace("px","")),-1<t.indexOf("rem")?n=t.replace("rem",""):-1<t.indexOf("px")&&(n=(t=t.replace("px",""))/o)),e&&"function"==typeof e&&e(-n,0)}},qk.history={back:function(e){if(e)HistoryStock.option.popData(),location.href=e;else{var t=HistoryStock.option.getBackUrl();t?location.href=t:window.history.go(-1)}}},qk.sellNav=(C=["/mycoupon.html","/myorder.html","/myfavourite.html","/user_address.html","/myreturnlist.html","/myreturnapply.html","/myrefundlist.html"],G=function(e){$("#qkNavBackBtn").unbind("click"),e?$("#qkNavBackBtn").click(e):$("#qkNavBackBtn").click(function(){qk.history.back()})},{init:function(){$("#qkNavMenu").click(function(){var e=$("#qkNavMenuBox");e.toggle(),$(this).attr("box-display",e.css("display"))}),function(e){for(var t=0;t<=C.length;t++)if(e===C[t])return!0;return!1}(location.pathname)?G(function(){var e=location.hash;e&&"#"!=e?location.href=location.pathname:qk.history.back("/usercenter.html")}):G(),$.get(baseRouteServicePrefix+"/cart/getSkuNum",function(e){if(e&&e.isSuccess&&1==e.isSuccess){var t=e.data;0==e.data?(t="",$("#qkNavCartNum").hide(),$("#qkBottomCartNum").hide(),$("#qkNavPopMsg").removeClass("msg-pop")):($("#qkNavCartNum").show(),$("#qkBottomCartNum").show(),$("#qkNavPopMsg").addClass("msg-pop")),99<t&&(t="99+"),$("#qkNavCartNum").text(t),$("#qkBottomCartNum").text(t)}else $("#qkNavCartNum").hide(),$("#qkBottomCartNum").hide(),$("#qkNavPopMsg").removeClass("msg-pop")},"json")},title:function(e){if(void 0===e)return $("#qkNavTitle").html();$("#qkNavTitle").html(e)},setBack:G,setNavMenu:function(e){e&&$("#qkNavMenu").click(e)}}),qk.dialog=function(){var o,n,i=function(){o.hide()};return{show:function(e){var t=['<div class="mod-dialog">','<div class="dialog-main">',(e=$.extend({content:"",width:"85%"},e)).content,"</div>",'<div class="dialog-bg"></div>',"</div>"].join("");return o=$(t).appendTo("body"),(n=o.find(".dialog-main").width(e.width)).css({marginLeft:-n.width()/2,marginTop:-n.height()/2}),o.find(".dialog-bg").click(function(){e.fnOk&&e.fnOk(),i()}),o.find(".dialog-close").click(function(){i()}),o},hide:i}},qk.dialog.confirm=function(cfg){cfg=$.extend({html:"",cancelText:"取消",okText:"确定",sureCallback:null,cancelCallback:null},cfg);var html=['<div class="confirm-content clearfix">',cfg.html||"","</div>",'<div class="confirm-console flexbox">','<a href="#" onclick="return false;" class="btn-cancel flexitem">'+cfg.cancelText+"</a>",'<a href="#" onclick="return false;" class="btn-ok flexitem">'+cfg.okText+"</a>","</div>"].join(""),d=new qk.dialog,eleDialog=d.show({content:html});return eleDialog.find(".btn-cancel").click(function(){if(!1!==(cfg.fnCancel&&cfg.fnCancel())&&d.hide(),cfg.cancelCallback&&"function"==typeof cfg.cancelCallback)return cfg.cancelCallback()}),eleDialog.find(".btn-ok").click(function(){var ret=cfg.fnOk&&cfg.fnOk();if(!1!==ret&&d.hide(),cfg.sureCallback&&"function"==typeof eval(cfg.sureCallback))return cfg.sureCallback}),eleDialog},qk.dialog.alert=function(){var e={html:"",okText:"确定"};2==arguments.length?e=$.extend(e,{html:arguments[0],fnOk:arguments[1]}):1==arguments.length&&"object"==typeof arguments[0]?e=$.extend(e,arguments[0]):1==arguments.length&&(e=$.extend(e,{html:arguments[0]}));var t=['<div class="confirm-content clearfix">',e.html||"","</div>",'<div class="confirm-console flexbox">','<a href="#" onclick="return false;" class="btn-ok flexitem">'+e.okText+"</a>","</div>"].join(""),o=new qk.dialog,n=o.show({content:t,fnOk:e.fnOk});return n.find(".btn-ok").click(function(){!1!==(e.fnOk&&e.fnOk())&&o.hide()}),n},qk.dialog.loading=function(e){var t=$(".Loading"),o=$("body");if(!(0<t.length)){var n='<div class="Loading" style="display:none;"><img src="'+nodeParam.staticPath+'/images/loading.gif"></div>';o.prepend(n),t=$(".Loading");document.documentElement.clientHeight>=o.height()?document.documentElement.clientHeight:o.height(),t.on("touchmove",function(e){e.preventDefault()})}"hide"==e&&t.hide(),"show"==e&&t.show()},qk.layer={},qk.layer.msg=function(e){e=e||"页面出错",layer.open({content:e,skin:"msg",style:"bottom:0",time:2})},qk.backTop=function(e){if(e&&(-1<e.indexOf(".")||-1<e.indexOf("#"))){var t=$(window),o=$(e),n=t.height();t.scroll(function(){var e=t.scrollTop();n<e?o.show():o.hide()}),o.on("click",function(){t.scrollTop(0,0)})}},qk.passport={login:function(e){var t,o,n=e||location.href;o=-1<(t=n).indexOf("?")?"&":"?",0!=(n=(t=-1<t.indexOf("#")?t:t+"").split("#").join(o+"time="+ +new Date)).indexOf(location.origin)&&(n=location.origin+n);var i=nodeParam.loginUrl+(new Date).getTime()+"&returnUrl="+encodeURIComponent(n);window.location.href=i}},qk.getCssRemNumber=function(e){var t=0;return e?("NaN"!=(t=Number(e.replace("rem","")))&&t||(t=0),t):0},qk.getPrice=function(t,o,n){n&&n--,$.ajax({type:"post",url:baseRouteServicePrefix+"/product/getPrice",dataType:"json",data:{skus:t},success:function(e){e&&e.isSuccess&&e.data?"function"==typeof o&&o(e,t):(0==n&&o(e,t),n&&0<n&&qk.getPrice(t,o,n))},error:function(e){}})},qk.getAllProductPrice=function(t,o,n){n&&n--,$.ajax({type:"post",url:baseRouteServicePrefix+"/product/getAllProductPrice",dataType:"json",data:{skus:t},success:function(e){e&&e.isSuccess&&e.data?"function"==typeof o&&o(e,t):(0==n&&o(e,t),n&&0<n&&qk.getAllProductPrice(t,o,n))},error:function(e){}})},qk.getUrlParam=function(n){var e=location.search.substr(1).split("&"),i="";return $.each(e,function(e,t){var o=t.split("=");o[0]==n&&(i=o[1])}),i};var interval=null;qk.getNowTime=function(e,t){clearInterval(interval),interval=setInterval(function(){$.ajax({type:"get",url:baseRouteServicePrefix+"/reserve/getNowTime",dataType:"json",data:"",success:function(e){e&&e.isSuccess&&e.data&&t(e)},error:function(){}})},e)},qk.getTimeShowStr=function(e){var t=new Date(e),o={};return o.year=t.getFullYear(),o.month=t.getMonth()+1,o.day=9<t.getDate()?t.getDate():"0"+t.getDate(),o.hour=9<t.getHours()?t.getHours():"0"+t.getHours(),o.minute=9<t.getMinutes()?t.getMinutes():"0"+t.getMinutes(),o.second=9<t.getSeconds()?t.getSeconds():"0"+t.getSeconds(),o},qk.getTimeShowStr2Millisec=function(e){e=String(e);var t=new Date;return t.setFullYear(e.slice(0,4)),t.setMonth(e.slice(4,6)-1),t.setDate(e.slice(6,8)),t.setHours(e.slice(8,10)),t.setMinutes(0),t.setSeconds(0),t.setMilliseconds(0),t.getTime()};var Popup=function(){this._init.apply(this,arguments)};function isLoginAjax(t,o){$.ajax({url:baseRoutePrefix+"/user/userInfo",type:"post",data:{},dataType:"json",success:function(e){if(0==e.errorCode&&selectDirection(t),0!=e.errorCode)return-1==e.errorCode?goLogin(e.message):void qk.dialog.alert(e.message);e&&e.isSuccess&&o&&"function"==typeof o&&o()},error:function(e){qk.dialog.alert({html:"网络请求失败,请稍后再试！"})}})}function goLogin(e){if(!e)return qk.passport.login();qk.dialog.alert({html:e,fnOk:function(){qk.passport.login()}})}function selectDirection(e){switch(e.getAttribute("data-monitor")){case"h5_goodsdetails_buy_cart":case"h5_allproduct_shopcart_click":case"h5_v1home_menu_shopcart":window.location.href="/shop_cart.html";break;case"h5_allproduct_order_click":case"h5_home_menu_user":window.location.href="/usercenter.html"}}$.extend(Popup.prototype,{_init:function(e){e=e||{},this.mask=$(e.mask||".mask"),this.popup=$(e.popup||".popup"),this.template=e.template||"popup-template",this.mask.length||(this.mask=$('<div class="mask"></div>').appendTo("body")),this.popup.length||(this.popup=$('<div class="popup"></div>').appendTo("body")),this.bindEvents()},show:function(){this.mask.add(this.popup).show(),this.resetPos()},hide:function(){this.mask.add(this.popup).hide()},setContent:function(e,t){var o=template(this.template,e);this.popup.html(o),this.show(),t&&t(this.popup)},bindEvents:function(){var t=this;$(document).on("click",".btn-close",function(e){e.preventDefault(),t.hide()})},resetPos:function(){var e=window.innerHeight||document.documentElement.clientHeight||100,t=e-this.popup.height();this.popup.height()>e/2?(this.popup.css("position","absolute"),t+=$("body").scrollTop(),this.popup.css({left:0,top:t,width:"100%",marginTop:"0px"})):(this.popup.css("position","fixed"),this.popup.css({left:"5%",top:"50%",width:"90%",marginTop:"-"+this.popup.height()/2+"px"}))}}),qk.errorMsg={error_return:"抱歉，出错了，请稍后再试",error_call:"抱歉，网络繁忙，请稍后再试",error_quick_operate:"抱歉，操作过快，请稍后再试"},qk.checkAjaxData=function(e){return e?!!e.isSuccess||(-1==e.errorCode?goLogin(e.msg):qk.layer.msg(e.msg),!1):(qk.layer.msg(qk.errorMsg.error_return),!1)},qk.addressBackShow=function(e,t){var o,n,i,a,r,c={province:t.province||t.provinceId,city:t.city||t.cityId,county:t.county||t.countyId,town:t.town||t.townId};for(var s in country_Json)if(country_Json[s].c==c.province){e.checkRange(0,[s]),e.locatePostion(0,s),o=country_Json[s],a=s;break}for(var l in o.s)if(o.s[l].c==c.city){n=o.s[l],e.checkRange(1,[a,l]),e.locatePostion(1,l),r=l;break}for(var u in n.s)if(n.s[u].c==c.county){i=n.s[u],e.checkRange(2,[a,r,u]),e.locatePostion(2,u),u;break}var d=o.n+" "+n.n+" "+i.n;if(c.hasOwnProperty("town"))for(var p in i.s)if(i.s[p].c==c.town){d+=" "+i.s[p].n,e.locatePostion(3,p);break}return d},qk.backAreaText=function(e,t,o){if(e.areaId)var n=e.areaId.split("-"),i=n[0]||"0",a=n[1]||"0",r=n[2]||"0",c=n[3]||"0",s="";else{var l={province:e.province||e.provinceId,city:e.city||e.cityId,county:e.county||e.countyId,town:e.town||e.townId};i=l.province||"0",a=l.city||"0",r=l.county||"0",c=l.town||"0",s=""}for(var u in t)if(i==u){s+=t[u]+" ";break}var d=o;for(var u in d||{})if(a==u){s+=d[u][0]+" ";break}var p=d[a]?d[a][1]:{};for(var u in p)if(r==u){"string"==typeof p[u]?s+=p[u]:s+=p[u][0]+" ";break}if("string"!=typeof p[r]){var f=p[r]?p[r][1]:{};for(var u in f)if(c==u){s+=f[u];break}}return s},qk.initAddressControl=function(e){new Address({type:"click",src:e.src,isStop:!0,title:"所在地区",provMap:e.firstLevel,addrJsonLevel:e.addrJsonLevel,finishCB:e.callback,closeCB:e.closeBack});if(e.areaData&&e.otherLevel){var t=this.backAreaText(e.areaData,e.firstLevel,e.otherLevel),o=$(e.src);"INPUT"==o[0].tagName.toUpperCase()?o.val(t):o.html(t),e.areaData&&e.areaData.areaId&&-1<e.areaData.areaId.indexOf("-")?o.attr("data-area",e.areaData.areaId):o.attr("data-area",e.areaData.provinceId+"-"+e.areaData.cityId+"-"+e.areaData.countyId+"-"+e.areaData.townId)}},qk.page={},qk.page.loadBack=function(e,t,o){var n=0;return e&&t&&o?n=t<parseInt(e/o)+(e%o==0?0:1)?1:0!=e?t<=1?2:3:4:(qk.layer.msg(qk.errorMsg.error_return),n)},qk.page.load=function(e,t,o){e&&t&&o?t<parseInt(e/o)+(e%o==0?0:1)?($("#pageLoadingMore").show(),$("#pageNoMore").hide()):($("#pageLoadingMore").hide(),0!=e&&(t<=1?$("#pageNoMore").css("visibility","hidden"):$("#pageNoMore").css("visibility","visible"),$("#pageNoMore").show())):qk.layer.msg(qk.errorMsg.error_return)},qk.page.load1=function(e,t){t?e?($("#pageLoadingMore").show(),$("#pageNoMore").hide()):($("#pageLoadingMore").hide(),t<=1?$("#pageNoMore").css("visibility","hidden"):$("#pageNoMore").css("visibility","visible"),$("#pageNoMore").show()):qk.layer.msg(qk.errorMsg.error_return)},qk.page.requestFailed=function(){var e=$("#request-failed");if(0<e.length){var t=$(e).data("errinfo"),o=t.msg;return-1==t.errorCode?goLogin(o||"请先登录"):qk.layer.msg(o||"抱歉，出错了，请稍后再试"),$(e).remove(),!1}return!0},qk.page.loadAppendFailed=function(e){var t=e;if(0<t.length){var o=$(t).data("errinfo");o.status&&o.status.errMsg;return $(t).remove(),!1}return!0},qk.parseString2Json=function(t){if(t&&"string"==typeof t)try{return JSON.parse(t)}catch(e){return t}return{}};var B2C_JCLOUD_HANDLER={ajaxInfo:function(e,t,o,n,i,a,r){qk.dialog.loading("show"),a=null==a||!!a,$.ajax({type:"post",url:t,dataType:"json",data:e,async:a,success:function(e){o&&o(e,t)},error:function(e){n&&n(e,t),r||qk.layer.msg(qk.errorMsg.error_call)},complete:function(e){i&&i(e,t)}}).always(function(){qk.dialog.loading("hide")})},ajaxInfoNoLoading:function(e,t,o,n,i,a){i=null==i||!!i,a=null==a?"post":a||"post",$.ajax({type:a,url:t,dataType:"json",data:e,async:i,success:function(e){o&&o(e,t)},error:function(e){n&&n(e,t)}})},ajaxInfoContentJson:function(e,t,o,n,i){qk.dialog.loading("show"),i=null==i||!!i,$.ajax({type:"post",url:t,contentType:"application/json",data:JSON.stringify(e),dataType:"json",async:i,success:function(e){o&&o(e,t)},error:function(e){n&&n(e,t)}}).always(function(){qk.dialog.loading("hide")})},getJSON:function(e,t,o,n,i){qk.dialog.loading("show"),$.getJSON(t,e).then(function(e){o&&o(e,t)},function(e){n&&n(e,t)}).always(function(e){qk.dialog.loading("hide"),i&&i(e,t)})},getJSONNoLoading:function(e,t,o,n,i){$.getJSON(t,e).then(function(e){o&&o(e,t)},function(e){n&&n(e,t)}).always(function(e){i&&i(e,t)})},deepCopy:function(e){var t={};for(var o in e)t[o]="object"==typeof e[o]?this.deepCopy(e[o]):e[o];return t},qkDialogConfirm:function(e,t){qk.dialog.confirm({html:e,fnOk:function(){t()}})}},HistoryStock={},fd,gd,id,kd,md;HistoryStock.option=(fd="history_stock_key",gd=[],id=function(){return!!window.sessionStorage},kd=function(){if(id()){var e=sessionStorage.getItem(fd);if(e){var t=JSON.parse(e);if(0<t.length){var o=t.pop();return sessionStorage.setItem(fd,JSON.stringify(t)),o}}}},md=function(){if(!id())return null;var e=kd();return e?location.href==e.url?md():e.url:null},{pushData:function(){var e={};if(e.url=location.href,id()&&!function(e){for(var t=0;t<gd.length;t++)if(e===gd[t])return!0;return!1}(location.pathname)){var t=sessionStorage.getItem(fd);t||(t="[]");var o=JSON.parse(t);if(0<o.length){"1"==sessionStorage.getItem("isReloadBackPage")&&(sessionStorage.removeItem("isReloadBackPage"),o.pop(),o.pop());var n=o[o.length-1];e.url==n.url&&o.pop()}o.push(e),sessionStorage.setItem(fd,JSON.stringify(o))}},popData:kd,topData:function(){if(id()){var e=sessionStorage.getItem(fd);if(e){var t=JSON.parse(e);if(0<t.length)return t[t.length-1]}}},getBackUrl:md});var _scrollTop={init:function(){this.bindScrollEvent()},bindScrollEvent:function(){var e=this;$(window).scroll(function(){e.checkScrollPosition()}),$("#goTop").click(function(){var t=$(window).scrollTop(),o=250;0<t&&setInterval(function e(){0<t&&(t-=o,$(window).scrollTop(t),t<=0&&($(window).scrollTop(0),clearInterval(e)))},1)})},checkScrollPosition:function(){var e=$(window).scrollTop(),t=$(window).height(),o=$("#goTop");t<e?o.show():o.hide()}};uploadFileMaxSize=nodeParam.uploadFileMaxSize?nodeParam.uploadFileMaxSize:5,baseRoutePrefix="/proxy",baseRouteServicePrefix="/proxy/b2c-brand-h5-service",baseRouteSeckillServicePrefix="/proxy/b2c-brand-h5-service-seckill";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
